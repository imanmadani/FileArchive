// <auto-generated />
using System;
using FileArchive.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FileArchive.Repository.Migrations
{
    [DbContext(typeof(FileArchiveContext))]
    partial class FileArchiveContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FileArchive.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<byte[]>("Body");

                    b.Property<string>("FileExtention")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.FileCustomProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileCustomPropertyStatus");

                    b.Property<int>("Sorted");

                    b.Property<int>("Title")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("FileCustomProperties");
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.FileDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CustomProperty1")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty10")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty2")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty3")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty4")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty5")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty6")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty7")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty8")
                        .HasMaxLength(256);

                    b.Property<string>("CustomProperty9")
                        .HasMaxLength(256);

                    b.Property<string>("ExtentionFile")
                        .HasMaxLength(10);

                    b.Property<int>("FileCustomPropertyStatusId1");

                    b.Property<int>("FileCustomPropertyStatusId2");

                    b.Property<int>("FileCustomPropertyStatusId3");

                    b.Property<int>("FileCustomPropertyStatusId4");

                    b.Property<int>("FileCustomPropertyStatusId5");

                    b.Property<Guid>("FileId");

                    b.Property<long>("FileSize");

                    b.Property<int>("FileTypeId");

                    b.Property<int>("FolderId");

                    b.Property<bool>("IsPreviewFolder");

                    b.Property<string>("Keyword")
                        .HasMaxLength(256);

                    b.Property<string>("OrginalFileName")
                        .HasMaxLength(256);

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("RatingCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.FileType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FileTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Image"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Media"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Other"
                        });
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParentId");

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.ImageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DTDigitized")
                        .HasColumnType("varchar")
                        .HasMaxLength(20);

                    b.Property<string>("Equip_Make")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<string>("Equip_Model")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<string>("Experture_Time")
                        .HasColumnType("varchar")
                        .HasMaxLength(20);

                    b.Property<string>("F_Number")
                        .HasColumnType("varchar")
                        .HasMaxLength(20);

                    b.Property<Guid>("FileId");

                    b.Property<string>("Flash");

                    b.Property<int>("Height");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("Decimal(9,6)");

                    b.Property<decimal>("LatitudeGeoCode")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("Decimal(15,10)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("Decimal(9,6)");

                    b.Property<decimal>("LongitudeGeoCode")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("Decimal(15,10)");

                    b.Property<string>("MapUrl")
                        .HasColumnType("varchar")
                        .HasMaxLength(100);

                    b.Property<string>("Sensing_Method")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<string>("Shutter_Speed")
                        .HasColumnType("varchar")
                        .HasMaxLength(20);

                    b.Property<string>("User_Comment")
                        .HasMaxLength(50);

                    b.Property<int>("Width");

                    b.Property<string>("X_Resolution")
                        .HasColumnType("varchar")
                        .HasMaxLength(20);

                    b.Property<string>("Y_ResolutionY")
                        .HasColumnType("varchar")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(7)");

                    b.Property<Guid>("FileId");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(7)");

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SettingKey")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.FileDetail", b =>
                {
                    b.HasOne("FileArchive.Domain.Entities.File", "File")
                        .WithMany("FileDetails")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileArchive.Domain.Entities.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileArchive.Domain.Entities.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileArchive.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.ImageFile", b =>
                {
                    b.HasOne("FileArchive.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileArchive.Domain.Entities.MediaFile", b =>
                {
                    b.HasOne("FileArchive.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
